window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"hat.json": {"fullname": "hat.json", "modulename": "hat.json", "kind": "module", "doc": "<p>JSON Data library</p>\n"}, "hat.json.Array": {"fullname": "hat.json.Array", "modulename": "hat.json", "qualname": "Array", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.List[ForwardRef(&#x27;Data&#x27;)]"}, "hat.json.Object": {"fullname": "hat.json.Object", "modulename": "hat.json", "qualname": "Object", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Dict[str, ForwardRef(&#x27;Data&#x27;)]"}, "hat.json.Data": {"fullname": "hat.json.Data", "modulename": "hat.json", "qualname": "Data", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Union[NoneType, bool, int, float, str, typing.List[ForwardRef(&#x27;Data&#x27;)], typing.Dict[str, ForwardRef(&#x27;Data&#x27;)]]"}, "hat.json.equals": {"fullname": "hat.json.equals", "modulename": "hat.json", "qualname": "equals", "kind": "function", "doc": "<p>Equality comparison of json serializable data.</p>\n\n<p>Tests for equality of data according to JSON format. Notably, <code>bool</code>\nvalues are not considered equal to numeric values in any case. This is\ndifferent from default equality comparison, which considers <code>False</code>\nequal to <code>0</code> and <code>0.0</code>; and <code>True</code> equal to <code>1</code> and <code>1.0</code>.</p>\n\n<p>Example::</p>\n\n<pre><code>assert equals(0, 0.0) is True\nassert equals({'a': 1, 'b': 2}, {'b': 2, 'a': 1}) is True\nassert equals(1, True) is False\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "hat.json.clone": {"fullname": "hat.json.clone", "modulename": "hat.json", "qualname": "clone", "kind": "function", "doc": "<p>Deep clone data</p>\n\n<p>This function recursively creates new instances of array and object data\nbased on input data. Resulting json data is equal to provided data.</p>\n\n<p>Example::</p>\n\n<pre><code>x = {'a': [1, 2, 3]}\ny = clone(x)\nassert x is not y\nassert x['a'] is not y['a']\nassert equals(x, y)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.flatten": {"fullname": "hat.json.flatten", "modulename": "hat.json", "qualname": "flatten", "kind": "function", "doc": "<p>Flatten JSON data</p>\n\n<p>If <code>data</code> is array, this generator recursively yields result of <code>flatten</code>\ncall with each element of input list. For other <code>Data</code> types, input data is\nyielded.</p>\n\n<p>Example::</p>\n\n<pre><code>data = [1, [], [2], {'a': [3]}]\nresult = [1, 2, {'a': [3]}]\nassert list(flatten(data)) == result\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.Path": {"fullname": "hat.json.Path", "modulename": "hat.json", "qualname": "Path", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Union[int, str, typing.List[ForwardRef(&#x27;Path&#x27;)]]"}, "hat.json.get": {"fullname": "hat.json.get", "modulename": "hat.json", "qualname": "get", "kind": "function", "doc": "<p>Get data element referenced by path</p>\n\n<p>Example::</p>\n\n<pre><code>data = {'a': [1, 2, [3, 4]]}\npath = ['a', 2, 0]\nassert get(data, path) == 3\n\ndata = [1, 2, 3]\nassert get(data, 0) == 1\nassert get(data, 5) is None\nassert get(data, 5, default=123) == 123\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Path&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.set_": {"fullname": "hat.json.set_", "modulename": "hat.json", "qualname": "set_", "kind": "function", "doc": "<p>Create new data by setting data path element value</p>\n\n<p>Example::</p>\n\n<pre><code>data = [1, {'a': 2, 'b': 3}, 4]\npath = [1, 'b']\nresult = set_(data, path, 5)\nassert result == [1, {'a': 2, 'b': 5}, 4]\nassert result is not data\n\ndata = [1, 2, 3]\nresult = set_(data, 4, 4)\nassert result == [1, 2, 3, None, 4]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Path&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.remove": {"fullname": "hat.json.remove", "modulename": "hat.json", "qualname": "remove", "kind": "function", "doc": "<p>Create new data by removing part of data referenced by path</p>\n\n<p>Example::</p>\n\n<pre><code>data = [1, {'a': 2, 'b': 3}, 4]\npath = [1, 'b']\nresult = remove(data, path)\nassert result == [1, {'a': 2}, 4]\nassert result is not data\n\ndata = [1, 2, 3]\nresult = remove(data, 4)\nassert result == [1, 2, 3]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Path&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.Storage": {"fullname": "hat.json.Storage", "modulename": "hat.json", "qualname": "Storage", "kind": "class", "doc": "<p>JSON data storage</p>\n\n<p>Helper class representing observable JSON data state manipulated with\npath based get/set/remove functions.</p>\n"}, "hat.json.Storage.__init__": {"fullname": "hat.json.Storage.__init__", "modulename": "hat.json", "qualname": "Storage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "hat.json.Storage.data": {"fullname": "hat.json.Storage.data", "modulename": "hat.json", "qualname": "Storage.data", "kind": "variable", "doc": "<p>Data</p>\n", "annotation": ": Union[NoneType, bool, int, float, str, List[Union[NoneType, bool, int, float, str, List[ForwardRef(&#x27;Data&#x27;)], Dict[str, ForwardRef(&#x27;Data&#x27;)]]], Dict[str, Union[NoneType, bool, int, float, str, List[ForwardRef(&#x27;Data&#x27;)], Dict[str, ForwardRef(&#x27;Data&#x27;)]]]]"}, "hat.json.Storage.register_change_cb": {"fullname": "hat.json.Storage.register_change_cb", "modulename": "hat.json", "qualname": "Storage.register_change_cb", "kind": "function", "doc": "<p>Register data change callback</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cb</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]],</span> <span class=\"kc\">None</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hat</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"o\">.</span><span class=\"n\">RegisterCallbackHandle</span>:</span></span>", "funcdef": "def"}, "hat.json.Storage.get": {"fullname": "hat.json.Storage.get", "modulename": "hat.json", "qualname": "Storage.get", "kind": "function", "doc": "<p>Get data</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Path&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "hat.json.Storage.set": {"fullname": "hat.json.Storage.set", "modulename": "hat.json", "qualname": "Storage.set", "kind": "function", "doc": "<p>Set data</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Path&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "hat.json.Storage.remove": {"fullname": "hat.json.Storage.remove", "modulename": "hat.json", "qualname": "Storage.remove", "kind": "function", "doc": "<p>Remove data</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Path&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "hat.json.Format": {"fullname": "hat.json.Format", "modulename": "hat.json", "qualname": "Format", "kind": "class", "doc": "<p>Encoding format</p>\n", "bases": "enum.Enum"}, "hat.json.Format.JSON": {"fullname": "hat.json.Format.JSON", "modulename": "hat.json", "qualname": "Format.JSON", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Format.JSON: &#x27;json&#x27;&gt;"}, "hat.json.Format.YAML": {"fullname": "hat.json.Format.YAML", "modulename": "hat.json", "qualname": "Format.YAML", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Format.YAML: &#x27;yaml&#x27;&gt;"}, "hat.json.Format.TOML": {"fullname": "hat.json.Format.TOML", "modulename": "hat.json", "qualname": "Format.TOML", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Format.TOML: &#x27;toml&#x27;&gt;"}, "hat.json.encode": {"fullname": "hat.json.encode", "modulename": "hat.json", "qualname": "encode", "kind": "function", "doc": "<p>Encode JSON data.</p>\n\n<p>In case of TOML format, data must be JSON Object.</p>\n\n<p>In case of TOML format, <code>indent</code> is ignored.</p>\n\n<p>In case of YAML or TOML format, <code>sort_keys</code> is ignored.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  JSON data</li>\n<li><strong>format:</strong>  encoding format</li>\n<li><strong>indent:</strong>  indentation size</li>\n<li><strong>sort_keys:</strong>  sort object keys</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">hat</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">Format</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Format</span><span class=\"o\">.</span><span class=\"n\">JSON</span><span class=\"p\">:</span> <span class=\"s1\">&#39;json&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sort_keys</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "hat.json.decode": {"fullname": "hat.json.decode", "modulename": "hat.json", "qualname": "decode", "kind": "function", "doc": "<p>Decode JSON data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_str:</strong>  encoded JSON data</li>\n<li><strong>format:</strong>  encoding format</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">hat</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">Format</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Format</span><span class=\"o\">.</span><span class=\"n\">JSON</span><span class=\"p\">:</span> <span class=\"s1\">&#39;json&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.get_file_format": {"fullname": "hat.json.get_file_format", "modulename": "hat.json", "qualname": "get_file_format", "kind": "function", "doc": "<p>Detect file format based on path suffix</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">PurePath</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hat</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">Format</span>:</span></span>", "funcdef": "def"}, "hat.json.encode_file": {"fullname": "hat.json.encode_file", "modulename": "hat.json", "qualname": "encode_file", "kind": "function", "doc": "<p>Encode JSON data to file.</p>\n\n<p>If <code>format</code> is <code>None</code>, encoding format is derived from path suffix.</p>\n\n<p>In case of TOML format, data must be JSON Object.</p>\n\n<p>In case of TOML format, <code>indent</code> is ignored.</p>\n\n<p>In case of YAML or TOML format, <code>sort_keys</code> is ignored.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  JSON data</li>\n<li><strong>path:</strong>  file path</li>\n<li><strong>format:</strong>  encoding format</li>\n<li><strong>indent:</strong>  indentation size</li>\n<li><strong>sort_keys:</strong>  sort object keys</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">PurePath</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">hat</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">Format</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">sort_keys</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "hat.json.decode_file": {"fullname": "hat.json.decode_file", "modulename": "hat.json", "qualname": "decode_file", "kind": "function", "doc": "<p>Decode JSON data from file.</p>\n\n<p>If <code>format</code> is <code>None</code>, encoding format is derived from path suffix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path:</strong>  file path</li>\n<li><strong>format:</strong>  encoding format</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">PurePath</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">hat</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">Format</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.encode_stream": {"fullname": "hat.json.encode_stream", "modulename": "hat.json", "qualname": "encode_stream", "kind": "function", "doc": "<p>Encode JSON data to stream.</p>\n\n<p>In case of TOML format, data must be JSON Object.</p>\n\n<p>In case of TOML format, <code>stream</code> should be <code>io.RawIOBase</code>. For\nother formats, <code>io.TextIOBase</code> is expected.</p>\n\n<p>In case of TOML format, <code>indent</code> is ignored.</p>\n\n<p>In case of YAML or TOML format, <code>sort_keys</code> is ignored.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  JSON data</li>\n<li><strong>stream:</strong>  output stream</li>\n<li><strong>format:</strong>  encoding format</li>\n<li><strong>indent:</strong>  indentation size</li>\n<li><strong>sort_keys:</strong>  sort object keys</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">stream</span><span class=\"p\">:</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">TextIOBase</span> <span class=\"o\">|</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">RawIOBase</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">hat</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">Format</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Format</span><span class=\"o\">.</span><span class=\"n\">JSON</span><span class=\"p\">:</span> <span class=\"s1\">&#39;json&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">sort_keys</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "hat.json.decode_stream": {"fullname": "hat.json.decode_stream", "modulename": "hat.json", "qualname": "decode_stream", "kind": "function", "doc": "<p>Decode JSON data from stream.</p>\n\n<p>In case of TOML format, <code>stream</code> should be <code>io.RawIOBase</code>. For\nother formats, <code>io.TextIOBase</code> is expected.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stream:</strong>  input stream</li>\n<li><strong>format:</strong>  encoding format</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">stream</span><span class=\"p\">:</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">TextIOBase</span> <span class=\"o\">|</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">RawIOBase</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">hat</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">Format</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Format</span><span class=\"o\">.</span><span class=\"n\">JSON</span><span class=\"p\">:</span> <span class=\"s1\">&#39;json&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.read_conf": {"fullname": "hat.json.read_conf", "modulename": "hat.json", "qualname": "read_conf", "kind": "function", "doc": "<p>Read configuration formated as JSON data</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_suffixes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;.yaml&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.yml&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.toml&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.json&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">stdio_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;-&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.diff": {"fullname": "hat.json.diff", "modulename": "hat.json", "qualname": "diff", "kind": "function", "doc": "<p>Generate JSON Patch diff.</p>\n\n<p>Example::</p>\n\n<pre><code>src = [1, {'a': 2}, 3]\ndst = [1, {'a': 4}, 3]\nresult = diff(src, dst)\nassert result == [{'op': 'replace', 'path': '/1/a', 'value': 4}]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">dst</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.patch": {"fullname": "hat.json.patch", "modulename": "hat.json.patch", "kind": "module", "doc": "<p>JSON Patch</p>\n"}, "hat.json.SchemaId": {"fullname": "hat.json.SchemaId", "modulename": "hat.json", "qualname": "SchemaId", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;str&#x27;&gt;"}, "hat.json.Schema": {"fullname": "hat.json.Schema", "modulename": "hat.json", "qualname": "Schema", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Dict[str, ForwardRef(&#x27;Data&#x27;)]"}, "hat.json.SchemaRepository": {"fullname": "hat.json.SchemaRepository", "modulename": "hat.json", "qualname": "SchemaRepository", "kind": "variable", "doc": "<p></p>\n", "default_value": "dict[str, typing.Dict[str, ForwardRef(&#x27;Data&#x27;)]]"}, "hat.json.create_schema_repository": {"fullname": "hat.json.create_schema_repository", "modulename": "hat.json", "qualname": "create_schema_repository", "kind": "function", "doc": "<p>Create JSON Schema repository.</p>\n\n<p>Repository can be initialized with multiple arguments, which can be\ninstances of <code>pathlib.PurePath</code> or <code>Schema</code>.</p>\n\n<p>If an argument is of type <code>pathlib.PurePath</code>, and path points to file\nwith a suffix '.json', '.yml' or '.yaml', json serializable data is decoded\nfrom the file. Otherwise, it is assumed that path points to a directory,\nwhich is recursively searched for json and yaml files. All decoded schemas\nare added to the repository. If a schema with the same <code>id</code> was previously\nadded, an exception is raised.</p>\n\n<p>If an argument is of type <code>Schema</code>, it should be a json serializable data\nrepresentation of a JSON schema. If a schema with the same <code>id</code> was\npreviously added, an exception is raised.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">PurePath</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.merge_schema_repositories": {"fullname": "hat.json.merge_schema_repositories", "modulename": "hat.json", "qualname": "merge_schema_repositories", "kind": "function", "doc": "<p>Merge JSON Schema repositories.</p>\n\n<p>Exception is raised is multiple repositories contain same schema id with\ndiferent schemas.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">repos</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.SchemaValidator": {"fullname": "hat.json.SchemaValidator", "modulename": "hat.json", "qualname": "SchemaValidator", "kind": "class", "doc": "<p>JSON Schema validator interface</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>repo:</strong>  repository containing JSON Schemas</li>\n</ul>\n", "bases": "abc.ABC"}, "hat.json.SchemaValidator.validate": {"fullname": "hat.json.SchemaValidator.validate", "modulename": "hat.json", "qualname": "SchemaValidator.validate", "kind": "function", "doc": "<p>Validate data against JSON Schema.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>schema_id:</strong>  JSON schema identifier</li>\n<li><strong>data:</strong>  data to be validated</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Exception</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">schema_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "hat.json.PySchemaValidator": {"fullname": "hat.json.PySchemaValidator", "modulename": "hat.json", "qualname": "PySchemaValidator", "kind": "class", "doc": "<p>Python implementation of SchemaValidator</p>\n", "bases": "hat.json.schema.SchemaValidator"}, "hat.json.PySchemaValidator.__init__": {"fullname": "hat.json.PySchemaValidator.__init__", "modulename": "hat.json", "qualname": "PySchemaValidator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">repo</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span>)</span>"}, "hat.json.PySchemaValidator.validate": {"fullname": "hat.json.PySchemaValidator.validate", "modulename": "hat.json", "qualname": "PySchemaValidator.validate", "kind": "function", "doc": "<p>Validate data against JSON Schema.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>schema_id:</strong>  JSON schema identifier</li>\n<li><strong>data:</strong>  data to be validated</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Exception</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">schema_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "hat.json.RsSchemaValidator": {"fullname": "hat.json.RsSchemaValidator", "modulename": "hat.json", "qualname": "RsSchemaValidator", "kind": "class", "doc": "<p>Rust implementation of SchemaValidatior</p>\n", "bases": "hat.json.schema.SchemaValidator"}, "hat.json.RsSchemaValidator.__init__": {"fullname": "hat.json.RsSchemaValidator.__init__", "modulename": "hat.json", "qualname": "RsSchemaValidator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">repo</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span>)</span>"}, "hat.json.RsSchemaValidator.validate": {"fullname": "hat.json.RsSchemaValidator.validate", "modulename": "hat.json", "qualname": "RsSchemaValidator.validate", "kind": "function", "doc": "<p>Validate data against JSON Schema.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>schema_id:</strong>  JSON schema identifier</li>\n<li><strong>data:</strong>  data to be validated</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>Exception</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">schema_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "hat.json.DefaultSchemaValidator": {"fullname": "hat.json.DefaultSchemaValidator", "modulename": "hat.json", "qualname": "DefaultSchemaValidator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;hat.json.schema.PySchemaValidator&#x27;&gt;"}, "hat.json.json_schema_repo": {"fullname": "hat.json.json_schema_repo", "modulename": "hat.json", "qualname": "json_schema_repo", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;hat-json://path.yaml&#x27;: {&#x27;$schema&#x27;: &#x27;https://json-schema.org/draft/2020-12/schema&#x27;, &#x27;$id&#x27;: &#x27;hat-json://path.yaml&#x27;, &#x27;title&#x27;: &#x27;JSON Path&#x27;, &#x27;oneOf&#x27;: [{&#x27;type&#x27;: &#x27;string&#x27;}, {&#x27;type&#x27;: &#x27;integer&#x27;}, {&#x27;type&#x27;: &#x27;array&#x27;, &#x27;items&#x27;: {&#x27;$ref&#x27;: &#x27;hat-json://path.yaml&#x27;}}]}, &#x27;hat-json://logging.yaml&#x27;: {&#x27;$schema&#x27;: &#x27;https://json-schema.org/draft/2020-12/schema&#x27;, &#x27;$id&#x27;: &#x27;hat-json://logging.yaml&#x27;, &#x27;title&#x27;: &#x27;Logging&#x27;, &#x27;description&#x27;: &#x27;Logging configuration&#x27;, &#x27;type&#x27;: &#x27;object&#x27;, &#x27;required&#x27;: [&#x27;version&#x27;], &#x27;properties&#x27;: {&#x27;version&#x27;: {&#x27;title&#x27;: &#x27;Version&#x27;, &#x27;type&#x27;: &#x27;integer&#x27;, &#x27;default&#x27;: 1}, &#x27;formatters&#x27;: {&#x27;title&#x27;: &#x27;Formatters&#x27;, &#x27;type&#x27;: &#x27;object&#x27;, &#x27;patternProperties&#x27;: {&#x27;.+&#x27;: {&#x27;title&#x27;: &#x27;Formatter&#x27;, &#x27;type&#x27;: &#x27;object&#x27;, &#x27;properties&#x27;: {&#x27;format&#x27;: {&#x27;title&#x27;: &#x27;Format&#x27;, &#x27;type&#x27;: &#x27;string&#x27;, &#x27;default&#x27;: None}, &#x27;datefmt&#x27;: {&#x27;title&#x27;: &#x27;Date format&#x27;, &#x27;type&#x27;: &#x27;string&#x27;, &#x27;default&#x27;: None}}}}}, &#x27;filters&#x27;: {&#x27;title&#x27;: &#x27;Filters&#x27;, &#x27;type&#x27;: &#x27;object&#x27;, &#x27;patternProperties&#x27;: {&#x27;.+&#x27;: {&#x27;title&#x27;: &#x27;Filter&#x27;, &#x27;type&#x27;: &#x27;object&#x27;, &#x27;properties&#x27;: {&#x27;name&#x27;: {&#x27;title&#x27;: &#x27;Logger name&#x27;, &#x27;type&#x27;: &#x27;string&#x27;, &#x27;default&#x27;: &#x27;&#x27;}}}}}, &#x27;handlers&#x27;: {&#x27;title&#x27;: &#x27;Handlers&#x27;, &#x27;type&#x27;: &#x27;object&#x27;, &#x27;patternProperties&#x27;: {&#x27;.+&#x27;: {&#x27;title&#x27;: &#x27;Handler&#x27;, &#x27;type&#x27;: &#x27;object&#x27;, &#x27;description&#x27;: &#x27;Additional properties are passed as keyword arguments to\\nconstructor\\n&#x27;, &#x27;required&#x27;: [&#x27;class&#x27;], &#x27;properties&#x27;: {&#x27;class&#x27;: {&#x27;title&#x27;: &#x27;Class&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}, &#x27;level&#x27;: {&#x27;title&#x27;: &#x27;Level&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}, &#x27;formatter&#x27;: {&#x27;title&#x27;: &#x27;Formatter&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}, &#x27;filters&#x27;: {&#x27;title&#x27;: &#x27;Filters&#x27;, &#x27;type&#x27;: &#x27;array&#x27;, &#x27;items&#x27;: {&#x27;title&#x27;: &#x27;Filter id&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}}}}}}, &#x27;loggers&#x27;: {&#x27;title&#x27;: &#x27;Loggers&#x27;, &#x27;type&#x27;: &#x27;object&#x27;, &#x27;patternProperties&#x27;: {&#x27;.+&#x27;: {&#x27;title&#x27;: &#x27;Logger&#x27;, &#x27;type&#x27;: &#x27;object&#x27;, &#x27;properties&#x27;: {&#x27;level&#x27;: {&#x27;title&#x27;: &#x27;Level&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}, &#x27;propagate&#x27;: {&#x27;title&#x27;: &#x27;Propagate&#x27;, &#x27;type&#x27;: &#x27;boolean&#x27;}, &#x27;filters&#x27;: {&#x27;title&#x27;: &#x27;Filters&#x27;, &#x27;type&#x27;: &#x27;array&#x27;, &#x27;items&#x27;: {&#x27;title&#x27;: &#x27;Filter id&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}}, &#x27;handlers&#x27;: {&#x27;title&#x27;: &#x27;Handlers&#x27;, &#x27;type&#x27;: &#x27;array&#x27;, &#x27;items&#x27;: {&#x27;title&#x27;: &#x27;Handler id&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}}}}}}, &#x27;root&#x27;: {&#x27;title&#x27;: &#x27;Root logger&#x27;, &#x27;type&#x27;: &#x27;object&#x27;, &#x27;properties&#x27;: {&#x27;level&#x27;: {&#x27;title&#x27;: &#x27;Level&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}, &#x27;filters&#x27;: {&#x27;title&#x27;: &#x27;Filters&#x27;, &#x27;type&#x27;: &#x27;array&#x27;, &#x27;items&#x27;: {&#x27;title&#x27;: &#x27;Filter id&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}}, &#x27;handlers&#x27;: {&#x27;title&#x27;: &#x27;Handlers&#x27;, &#x27;type&#x27;: &#x27;array&#x27;, &#x27;items&#x27;: {&#x27;title&#x27;: &#x27;Handler id&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}}}}, &#x27;incremental&#x27;: {&#x27;title&#x27;: &#x27;Incremental configuration&#x27;, &#x27;type&#x27;: &#x27;boolean&#x27;, &#x27;default&#x27;: False}, &#x27;disable_existing_loggers&#x27;: {&#x27;title&#x27;: &#x27;Disable existing loggers&#x27;, &#x27;type&#x27;: &#x27;boolean&#x27;, &#x27;default&#x27;: True}}}}"}, "hat.json.patch.diff": {"fullname": "hat.json.patch.diff", "modulename": "hat.json.patch", "qualname": "diff", "kind": "function", "doc": "<p>Generate JSON Patch diff.</p>\n\n<p>Example::</p>\n\n<pre><code>src = [1, {'a': 2}, 3]\ndst = [1, {'a': 4}, 3]\nresult = diff(src, dst)\nassert result == [{'op': 'replace', 'path': '/1/a', 'value': 4}]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">dst</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.patch.patch": {"fullname": "hat.json.patch.patch", "modulename": "hat.json.patch", "qualname": "patch", "kind": "function", "doc": "<p>Apply JSON Patch diff.</p>\n\n<p>Example::</p>\n\n<pre><code>data = [1, {'a': 2}, 3]\nd = [{'op': 'replace', 'path': '/1/a', 'value': 4}]\nresult = patch(data, d)\nassert result == [1, {'a': 4}, 3]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">diff</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}, "hat.json.vt": {"fullname": "hat.json.vt", "modulename": "hat.json.vt", "kind": "module", "doc": "<p>Virtual tree XML parser</p>\n"}, "hat.json.vt.parse": {"fullname": "hat.json.vt.parse", "modulename": "hat.json.vt", "qualname": "parse", "kind": "function", "doc": "<p>Parse XML document into virtual tree</p>\n\n<p>Each element is recursively parsed into a list with the following\nstructure, starting from the root of a document:</p>\n\n<pre><code>* First item is a valid CSS selector string, consisting of element tag\n  name; and optionally `id` and `class` attributes if present.\n\n* If the element has attributes other than `id` or `class`, they are\n  stored as a second item. The item is a dictionary which has an\n  `attrs` key, whose value is another dictionary, with key-value pairs\n  representing attribute names and their values, respectively.\n\n* All other items are element content. Each item is either a\n  recursively parsed element child (a list), or text (a string).\n</code></pre>\n\n<p>Resulting structure is JSON serializable.</p>\n\n<p>Namespace prefix declaration attributes (<code>xmlns:*</code>) are ignored.</p>\n\n<p>Example usage::</p>\n\n<pre><code>import io\nfrom hat import json\n\nxml = '''\\\n\n\n    <html>\n    <body>\n        <div id=\"first\" class=\"c1 c2\">\n            Banana\n        </div>\n        Orange\n        <br/>\n        <span id=\"second\" style=\"color:green\">\n            Watermelon\n        </span>\n    </body>\n</html>\n\n'''\nstripped = ''.join(line.lstrip() for line in xml.split('\\n'))\nstream = io.StringIO(stripped)\nparsed = json.vt.parse(stream)\n</code></pre>\n\n<p>Output::</p>\n\n<pre><code>['html',\n    ['body',\n        ['div#first.c1.c2',\n            \"Banana\"\n        ],\n        \"Orange\",\n        ['br'],\n        ['span#second',\n            {'attrs':\n                {'style': \"color:green\"}\n            },\n            \"Watermelon\"\n        ]\n    ]\n]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span> <span class=\"o\">|</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">sax</span><span class=\"o\">.</span><span class=\"n\">xmlreader</span><span class=\"o\">.</span><span class=\"n\">InputSource</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data&#39;</span><span class=\"p\">)]]]]</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"hat.json": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "hat.json.Array": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "hat.json.Object": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "hat.json.Data": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 19, "signature": 0, "bases": 0, "doc": 3}, "hat.json.equals": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 439, "bases": 0, "doc": 111}, "hat.json.clone": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 428, "bases": 0, "doc": 67}, "hat.json.flatten": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 477, "bases": 0, "doc": 68}, "hat.json.Path": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "hat.json.get": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 713, "bases": 0, "doc": 56}, "hat.json.set_": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 706, "bases": 0, "doc": 70}, "hat.json.remove": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 491, "bases": 0, "doc": 65}, "hat.json.Storage": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 21}, "hat.json.Storage.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 226, "bases": 0, "doc": 3}, "hat.json.Storage.data": {"qualname": 2, "fullname": 4, "annotation": 39, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "hat.json.Storage.register_change_cb": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 300, "bases": 0, "doc": 6}, "hat.json.Storage.get": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 297, "bases": 0, "doc": 4}, "hat.json.Storage.set": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 290, "bases": 0, "doc": 4}, "hat.json.Storage.remove": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 4}, "hat.json.Format": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 4}, "hat.json.Format.JSON": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "hat.json.Format.YAML": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "hat.json.Format.TOML": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "hat.json.encode": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 322, "bases": 0, "doc": 85}, "hat.json.decode": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 280, "bases": 0, "doc": 29}, "hat.json.get_file_format": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 9}, "hat.json.encode_file": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 325, "bases": 0, "doc": 112}, "hat.json.decode_file": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 274, "bases": 0, "doc": 47}, "hat.json.encode_stream": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 346, "bases": 0, "doc": 120}, "hat.json.decode_stream": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 295, "bases": 0, "doc": 55}, "hat.json.read_conf": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 387, "bases": 0, "doc": 8}, "hat.json.diff": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 643, "bases": 0, "doc": 45}, "hat.json.patch": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 4}, "hat.json.SchemaId": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "hat.json.Schema": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "hat.json.SchemaRepository": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "hat.json.create_schema_repository": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 245, "bases": 0, "doc": 146}, "hat.json.merge_schema_repositories": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 254, "bases": 0, "doc": 23}, "hat.json.SchemaValidator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 22}, "hat.json.SchemaValidator.validate": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 239, "bases": 0, "doc": 43}, "hat.json.PySchemaValidator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 6}, "hat.json.PySchemaValidator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 131, "bases": 0, "doc": 3}, "hat.json.PySchemaValidator.validate": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 239, "bases": 0, "doc": 43}, "hat.json.RsSchemaValidator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 6}, "hat.json.RsSchemaValidator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 131, "bases": 0, "doc": 3}, "hat.json.RsSchemaValidator.validate": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 239, "bases": 0, "doc": 43}, "hat.json.DefaultSchemaValidator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 11, "signature": 0, "bases": 0, "doc": 3}, "hat.json.json_schema_repo": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 855, "signature": 0, "bases": 0, "doc": 3}, "hat.json.patch.diff": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 643, "bases": 0, "doc": 45}, "hat.json.patch.patch": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 643, "bases": 0, "doc": 45}, "hat.json.vt": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "hat.json.vt.parse": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 250, "bases": 0, "doc": 236}}, "length": 51, "save": true}, "index": {"qualname": {"root": {"docs": {"hat.json.set_": {"tf": 1}, "hat.json.Storage.__init__": {"tf": 1}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.Array": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Object": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.Data": {"tf": 1}, "hat.json.Storage.data": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.decode": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 3}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.DefaultSchemaValidator": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.diff": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.clone": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.flatten": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Format": {"tf": 1}, "hat.json.Format.JSON": {"tf": 1}, "hat.json.Format.YAML": {"tf": 1}, "hat.json.Format.TOML": {"tf": 1}, "hat.json.get_file_format": {"tf": 1}}, "df": 5}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.Path": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.patch": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.PySchemaValidator": {"tf": 1}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.get": {"tf": 1}, "hat.json.Storage.get": {"tf": 1}, "hat.json.get_file_format": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.set_": {"tf": 1}, "hat.json.Storage.set": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage": {"tf": 1}, "hat.json.Storage.__init__": {"tf": 1}, "hat.json.Storage.data": {"tf": 1}, "hat.json.Storage.register_change_cb": {"tf": 1}, "hat.json.Storage.get": {"tf": 1}, "hat.json.Storage.set": {"tf": 1}, "hat.json.Storage.remove": {"tf": 1}}, "df": 7}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.Schema": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}, "hat.json.merge_schema_repositories": {"tf": 1}, "hat.json.json_schema_repo": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.SchemaId": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.SchemaRepository": {"tf": 1}}, "df": 1}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.SchemaValidator": {"tf": 1}, "hat.json.SchemaValidator.validate": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.remove": {"tf": 1}, "hat.json.Storage.remove": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "o": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.merge_schema_repositories": {"tf": 1}}, "df": 1}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.RsSchemaValidator": {"tf": 1}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Storage.__init__": {"tf": 1}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}}, "df": 3}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.Format.JSON": {"tf": 1}, "hat.json.json_schema_repo": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.Format.YAML": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.Format.TOML": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.merge_schema_repositories": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 3}}}}}}}}}}, "fullname": {"root": {"docs": {"hat.json.set_": {"tf": 1}, "hat.json.Storage.__init__": {"tf": 1}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}}, "df": 4, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json": {"tf": 1}, "hat.json.Array": {"tf": 1}, "hat.json.Object": {"tf": 1}, "hat.json.Data": {"tf": 1}, "hat.json.equals": {"tf": 1}, "hat.json.clone": {"tf": 1}, "hat.json.flatten": {"tf": 1}, "hat.json.Path": {"tf": 1}, "hat.json.get": {"tf": 1}, "hat.json.set_": {"tf": 1}, "hat.json.remove": {"tf": 1}, "hat.json.Storage": {"tf": 1}, "hat.json.Storage.__init__": {"tf": 1}, "hat.json.Storage.data": {"tf": 1}, "hat.json.Storage.register_change_cb": {"tf": 1}, "hat.json.Storage.get": {"tf": 1}, "hat.json.Storage.set": {"tf": 1}, "hat.json.Storage.remove": {"tf": 1}, "hat.json.Format": {"tf": 1}, "hat.json.Format.JSON": {"tf": 1}, "hat.json.Format.YAML": {"tf": 1}, "hat.json.Format.TOML": {"tf": 1}, "hat.json.encode": {"tf": 1}, "hat.json.decode": {"tf": 1}, "hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}, "hat.json.read_conf": {"tf": 1}, "hat.json.diff": {"tf": 1}, "hat.json.patch": {"tf": 1}, "hat.json.SchemaId": {"tf": 1}, "hat.json.Schema": {"tf": 1}, "hat.json.SchemaRepository": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}, "hat.json.merge_schema_repositories": {"tf": 1}, "hat.json.SchemaValidator": {"tf": 1}, "hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator": {"tf": 1}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator": {"tf": 1}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}, "hat.json.DefaultSchemaValidator": {"tf": 1}, "hat.json.json_schema_repo": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}, "hat.json.vt": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 51}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json": {"tf": 1}, "hat.json.Array": {"tf": 1}, "hat.json.Object": {"tf": 1}, "hat.json.Data": {"tf": 1}, "hat.json.equals": {"tf": 1}, "hat.json.clone": {"tf": 1}, "hat.json.flatten": {"tf": 1}, "hat.json.Path": {"tf": 1}, "hat.json.get": {"tf": 1}, "hat.json.set_": {"tf": 1}, "hat.json.remove": {"tf": 1}, "hat.json.Storage": {"tf": 1}, "hat.json.Storage.__init__": {"tf": 1}, "hat.json.Storage.data": {"tf": 1}, "hat.json.Storage.register_change_cb": {"tf": 1}, "hat.json.Storage.get": {"tf": 1}, "hat.json.Storage.set": {"tf": 1}, "hat.json.Storage.remove": {"tf": 1}, "hat.json.Format": {"tf": 1}, "hat.json.Format.JSON": {"tf": 1.4142135623730951}, "hat.json.Format.YAML": {"tf": 1}, "hat.json.Format.TOML": {"tf": 1}, "hat.json.encode": {"tf": 1}, "hat.json.decode": {"tf": 1}, "hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}, "hat.json.read_conf": {"tf": 1}, "hat.json.diff": {"tf": 1}, "hat.json.patch": {"tf": 1}, "hat.json.SchemaId": {"tf": 1}, "hat.json.Schema": {"tf": 1}, "hat.json.SchemaRepository": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}, "hat.json.merge_schema_repositories": {"tf": 1}, "hat.json.SchemaValidator": {"tf": 1}, "hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator": {"tf": 1}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator": {"tf": 1}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}, "hat.json.DefaultSchemaValidator": {"tf": 1}, "hat.json.json_schema_repo": {"tf": 1.4142135623730951}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}, "hat.json.vt": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 51}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.Array": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Object": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.Data": {"tf": 1}, "hat.json.Storage.data": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.decode": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 3}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.DefaultSchemaValidator": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.diff": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.clone": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.flatten": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Format": {"tf": 1}, "hat.json.Format.JSON": {"tf": 1}, "hat.json.Format.YAML": {"tf": 1}, "hat.json.Format.TOML": {"tf": 1}, "hat.json.get_file_format": {"tf": 1}}, "df": 5}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.Path": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.patch": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1.4142135623730951}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.PySchemaValidator": {"tf": 1}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.get": {"tf": 1}, "hat.json.Storage.get": {"tf": 1}, "hat.json.get_file_format": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.set_": {"tf": 1}, "hat.json.Storage.set": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage": {"tf": 1}, "hat.json.Storage.__init__": {"tf": 1}, "hat.json.Storage.data": {"tf": 1}, "hat.json.Storage.register_change_cb": {"tf": 1}, "hat.json.Storage.get": {"tf": 1}, "hat.json.Storage.set": {"tf": 1}, "hat.json.Storage.remove": {"tf": 1}}, "df": 7}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.Schema": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}, "hat.json.merge_schema_repositories": {"tf": 1}, "hat.json.json_schema_repo": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.SchemaId": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.SchemaRepository": {"tf": 1}}, "df": 1}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.SchemaValidator": {"tf": 1}, "hat.json.SchemaValidator.validate": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.remove": {"tf": 1}, "hat.json.Storage.remove": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "o": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.merge_schema_repositories": {"tf": 1}}, "df": 1}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.RsSchemaValidator": {"tf": 1}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Storage.__init__": {"tf": 1}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}}, "df": 3}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.Format.YAML": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.Format.TOML": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.merge_schema_repositories": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 3}}}}}}}, "t": {"docs": {"hat.json.vt": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 2}}}}, "annotation": {"root": {"docs": {"hat.json.Storage.data": {"tf": 2.23606797749979}}, "df": 1, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage.data": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.Storage.data": {"tf": 1.7320508075688772}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Storage.data": {"tf": 1.7320508075688772}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Storage.data": {"tf": 1.7320508075688772}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.Storage.data": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.Storage.data": {"tf": 1.7320508075688772}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage.data": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.Storage.data": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}, "x": {"2": {"7": {"docs": {"hat.json.Storage.data": {"tf": 2.8284271247461903}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.Storage.data": {"tf": 2}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.Storage.data": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}, "default_value": {"root": {"1": {"2": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}, "docs": {"hat.json.Array": {"tf": 1}, "hat.json.Object": {"tf": 1}, "hat.json.Data": {"tf": 1.4142135623730951}, "hat.json.Path": {"tf": 1}, "hat.json.Format.JSON": {"tf": 1.4142135623730951}, "hat.json.Format.YAML": {"tf": 1.4142135623730951}, "hat.json.Format.TOML": {"tf": 1.4142135623730951}, "hat.json.SchemaId": {"tf": 1.4142135623730951}, "hat.json.Schema": {"tf": 1}, "hat.json.SchemaRepository": {"tf": 1}, "hat.json.DefaultSchemaValidator": {"tf": 1.4142135623730951}, "hat.json.json_schema_repo": {"tf": 14.106735979665885}}, "df": 12, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.Array": {"tf": 1}, "hat.json.Object": {"tf": 1}, "hat.json.Data": {"tf": 1.7320508075688772}, "hat.json.Path": {"tf": 1.4142135623730951}, "hat.json.Schema": {"tf": 1}, "hat.json.SchemaRepository": {"tf": 1}}, "df": 6}}}, "e": {"docs": {"hat.json.json_schema_repo": {"tf": 5.916079783099616}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.Format.TOML": {"tf": 1.4142135623730951}}, "df": 1}}, "\\": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.json_schema_repo": {"tf": 5.744562646538029}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.Array": {"tf": 1}, "hat.json.Data": {"tf": 1}, "hat.json.Path": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "t": {"docs": {"hat.json.Format.JSON": {"tf": 1}, "hat.json.Format.YAML": {"tf": 1}, "hat.json.Format.TOML": {"tf": 1}, "hat.json.SchemaId": {"tf": 1}, "hat.json.DefaultSchemaValidator": {"tf": 1}}, "df": 5}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.json_schema_repo": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"hat.json.json_schema_repo": {"tf": 2}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.json_schema_repo": {"tf": 2.449489742783178}}, "df": 1}}}}}, "x": {"2": {"7": {"docs": {"hat.json.Array": {"tf": 1.4142135623730951}, "hat.json.Object": {"tf": 1.4142135623730951}, "hat.json.Data": {"tf": 2}, "hat.json.Path": {"tf": 1.4142135623730951}, "hat.json.Format.JSON": {"tf": 1.4142135623730951}, "hat.json.Format.YAML": {"tf": 1.4142135623730951}, "hat.json.Format.TOML": {"tf": 1.4142135623730951}, "hat.json.SchemaId": {"tf": 1.4142135623730951}, "hat.json.Schema": {"tf": 1.4142135623730951}, "hat.json.SchemaRepository": {"tf": 1.4142135623730951}, "hat.json.DefaultSchemaValidator": {"tf": 1.4142135623730951}, "hat.json.json_schema_repo": {"tf": 20.29778313018444}}, "df": 12}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.Array": {"tf": 1}, "hat.json.Object": {"tf": 1}, "hat.json.Data": {"tf": 1.4142135623730951}, "hat.json.Schema": {"tf": 1}, "hat.json.SchemaRepository": {"tf": 1}}, "df": 5}, "e": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.Object": {"tf": 1}, "hat.json.Data": {"tf": 1}, "hat.json.Schema": {"tf": 1}, "hat.json.SchemaRepository": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.json_schema_repo": {"tf": 2.449489742783178}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.Object": {"tf": 1}, "hat.json.Data": {"tf": 1}, "hat.json.Schema": {"tf": 1}, "hat.json.SchemaRepository": {"tf": 1}}, "df": 4}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Format.JSON": {"tf": 1}, "hat.json.Format.YAML": {"tf": 1}, "hat.json.Format.TOML": {"tf": 1}, "hat.json.json_schema_repo": {"tf": 1.7320508075688772}}, "df": 4, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.json_schema_repo": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Data": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.json_schema_repo": {"tf": 2}}, "df": 1, "s": {"docs": {"hat.json.json_schema_repo": {"tf": 2.8284271247461903}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Data": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Path": {"tf": 1}}, "df": 1}}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.Data": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.json_schema_repo": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Data": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "d": {"docs": {"hat.json.json_schema_repo": {"tf": 2.6457513110645907}}, "df": 1}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.json_schema_repo": {"tf": 2.449489742783178}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.Data": {"tf": 1}, "hat.json.Path": {"tf": 1}, "hat.json.SchemaId": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.json_schema_repo": {"tf": 3.7416573867739413}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.DefaultSchemaValidator": {"tf": 1}, "hat.json.json_schema_repo": {"tf": 2}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.Path": {"tf": 1}, "hat.json.json_schema_repo": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.json_schema_repo": {"tf": 2}}, "df": 1}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.DefaultSchemaValidator": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.json_schema_repo": {"tf": 2.6457513110645907}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.Format.JSON": {"tf": 1.4142135623730951}, "hat.json.DefaultSchemaValidator": {"tf": 1}, "hat.json.json_schema_repo": {"tf": 1}}, "df": 3, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.json_schema_repo": {"tf": 1.7320508075688772}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Format.JSON": {"tf": 1}, "hat.json.Format.YAML": {"tf": 1}, "hat.json.Format.TOML": {"tf": 1}, "hat.json.SchemaId": {"tf": 1}, "hat.json.DefaultSchemaValidator": {"tf": 1}}, "df": 5}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.Format.YAML": {"tf": 1.4142135623730951}, "hat.json.json_schema_repo": {"tf": 2.23606797749979}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.SchemaId": {"tf": 1}, "hat.json.DefaultSchemaValidator": {"tf": 1}, "hat.json.json_schema_repo": {"tf": 1.7320508075688772}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.DefaultSchemaValidator": {"tf": 1}, "hat.json.json_schema_repo": {"tf": 2.23606797749979}}, "df": 2}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.json_schema_repo": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"hat.json.json_schema_repo": {"tf": 2.449489742783178}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "/": {"2": {"0": {"2": {"0": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.json_schema_repo": {"tf": 3.1622776601683795}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.json_schema_repo": {"tf": 2.449489742783178}}, "df": 1}}}, "e": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.json_schema_repo": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.json_schema_repo": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.json_schema_repo": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "signature": {"root": {"3": {"9": {"docs": {"hat.json.equals": {"tf": 4}, "hat.json.clone": {"tf": 4}, "hat.json.flatten": {"tf": 4}, "hat.json.get": {"tf": 5.0990195135927845}, "hat.json.set_": {"tf": 5.0990195135927845}, "hat.json.remove": {"tf": 4.242640687119285}, "hat.json.Storage.__init__": {"tf": 2.8284271247461903}, "hat.json.Storage.register_change_cb": {"tf": 2.8284271247461903}, "hat.json.Storage.get": {"tf": 3.1622776601683795}, "hat.json.Storage.set": {"tf": 3.1622776601683795}, "hat.json.Storage.remove": {"tf": 1.4142135623730951}, "hat.json.encode": {"tf": 3.1622776601683795}, "hat.json.decode": {"tf": 3.1622776601683795}, "hat.json.encode_file": {"tf": 2.8284271247461903}, "hat.json.decode_file": {"tf": 2.8284271247461903}, "hat.json.encode_stream": {"tf": 3.1622776601683795}, "hat.json.decode_stream": {"tf": 3.1622776601683795}, "hat.json.read_conf": {"tf": 4.242640687119285}, "hat.json.diff": {"tf": 4.898979485566356}, "hat.json.patch": {"tf": 4.898979485566356}, "hat.json.create_schema_repository": {"tf": 2.8284271247461903}, "hat.json.merge_schema_repositories": {"tf": 2.8284271247461903}, "hat.json.SchemaValidator.validate": {"tf": 2.8284271247461903}, "hat.json.PySchemaValidator.__init__": {"tf": 2}, "hat.json.PySchemaValidator.validate": {"tf": 2.8284271247461903}, "hat.json.RsSchemaValidator.__init__": {"tf": 2}, "hat.json.RsSchemaValidator.validate": {"tf": 2.8284271247461903}, "hat.json.patch.diff": {"tf": 4.898979485566356}, "hat.json.patch.patch": {"tf": 4.898979485566356}, "hat.json.vt.parse": {"tf": 2.8284271247461903}}, "df": 30}, "docs": {}, "df": 0}, "4": {"docs": {"hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}}, "df": 2}, "docs": {"hat.json.equals": {"tf": 18.708286933869708}, "hat.json.clone": {"tf": 18.466185312619388}, "hat.json.flatten": {"tf": 19.493588689617926}, "hat.json.get": {"tf": 23.83275057562597}, "hat.json.set_": {"tf": 23.706539182259394}, "hat.json.remove": {"tf": 19.77371993328519}, "hat.json.Storage.__init__": {"tf": 13.45362404707371}, "hat.json.Storage.register_change_cb": {"tf": 15.491933384829668}, "hat.json.Storage.get": {"tf": 15.427248620541512}, "hat.json.Storage.set": {"tf": 15.231546211727817}, "hat.json.Storage.remove": {"tf": 7.810249675906654}, "hat.json.encode": {"tf": 16.0312195418814}, "hat.json.decode": {"tf": 14.89966442575134}, "hat.json.get_file_format": {"tf": 6.082762530298219}, "hat.json.encode_file": {"tf": 16.186414056238647}, "hat.json.decode_file": {"tf": 14.832396974191326}, "hat.json.encode_stream": {"tf": 16.64331697709324}, "hat.json.decode_stream": {"tf": 15.329709716755891}, "hat.json.read_conf": {"tf": 17.52141546793523}, "hat.json.diff": {"tf": 22.627416997969522}, "hat.json.patch": {"tf": 22.627416997969522}, "hat.json.create_schema_repository": {"tf": 14}, "hat.json.merge_schema_repositories": {"tf": 14.247806848775006}, "hat.json.SchemaValidator.validate": {"tf": 13.820274961085254}, "hat.json.PySchemaValidator.__init__": {"tf": 10.246950765959598}, "hat.json.PySchemaValidator.validate": {"tf": 13.820274961085254}, "hat.json.RsSchemaValidator.__init__": {"tf": 10.246950765959598}, "hat.json.RsSchemaValidator.validate": {"tf": 13.820274961085254}, "hat.json.patch.diff": {"tf": 22.627416997969522}, "hat.json.patch.patch": {"tf": 22.627416997969522}, "hat.json.vt.parse": {"tf": 14.142135623730951}}, "df": 31, "a": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.equals": {"tf": 2.449489742783178}, "hat.json.clone": {"tf": 2.449489742783178}, "hat.json.flatten": {"tf": 2.449489742783178}, "hat.json.get": {"tf": 3.3166247903554}, "hat.json.set_": {"tf": 3.3166247903554}, "hat.json.remove": {"tf": 2.8284271247461903}, "hat.json.Storage.__init__": {"tf": 1.7320508075688772}, "hat.json.Storage.register_change_cb": {"tf": 1.7320508075688772}, "hat.json.Storage.get": {"tf": 2.23606797749979}, "hat.json.Storage.set": {"tf": 2.23606797749979}, "hat.json.Storage.remove": {"tf": 1.4142135623730951}, "hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.decode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.decode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 1.7320508075688772}, "hat.json.decode_stream": {"tf": 1.7320508075688772}, "hat.json.read_conf": {"tf": 1.7320508075688772}, "hat.json.diff": {"tf": 3}, "hat.json.patch": {"tf": 3}, "hat.json.create_schema_repository": {"tf": 1.7320508075688772}, "hat.json.merge_schema_repositories": {"tf": 1.4142135623730951}, "hat.json.SchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.patch.diff": {"tf": 3}, "hat.json.patch.patch": {"tf": 3}, "hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 30}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.get": {"tf": 1}, "hat.json.Storage.__init__": {"tf": 1}, "hat.json.Storage.register_change_cb": {"tf": 1}, "hat.json.Storage.get": {"tf": 1}, "hat.json.encode": {"tf": 1.4142135623730951}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.decode_file": {"tf": 1.4142135623730951}, "hat.json.encode_stream": {"tf": 1}, "hat.json.read_conf": {"tf": 2}}, "df": 9, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.equals": {"tf": 2.449489742783178}, "hat.json.clone": {"tf": 2.449489742783178}, "hat.json.flatten": {"tf": 2.449489742783178}, "hat.json.get": {"tf": 3}, "hat.json.set_": {"tf": 3}, "hat.json.remove": {"tf": 2.449489742783178}, "hat.json.Storage.__init__": {"tf": 1.7320508075688772}, "hat.json.Storage.register_change_cb": {"tf": 1.7320508075688772}, "hat.json.Storage.get": {"tf": 1.7320508075688772}, "hat.json.Storage.set": {"tf": 1.7320508075688772}, "hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.decode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.decode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 1.7320508075688772}, "hat.json.decode_stream": {"tf": 1.7320508075688772}, "hat.json.read_conf": {"tf": 1.7320508075688772}, "hat.json.diff": {"tf": 3}, "hat.json.patch": {"tf": 3}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.merge_schema_repositories": {"tf": 1.4142135623730951}, "hat.json.SchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.patch.diff": {"tf": 3}, "hat.json.patch.patch": {"tf": 3}, "hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 29}}}}}}}}, "b": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.equals": {"tf": 2.6457513110645907}, "hat.json.clone": {"tf": 2.449489742783178}, "hat.json.flatten": {"tf": 2.449489742783178}, "hat.json.get": {"tf": 3}, "hat.json.set_": {"tf": 3}, "hat.json.remove": {"tf": 2.449489742783178}, "hat.json.Storage.__init__": {"tf": 1.7320508075688772}, "hat.json.Storage.register_change_cb": {"tf": 1.7320508075688772}, "hat.json.Storage.get": {"tf": 1.7320508075688772}, "hat.json.Storage.set": {"tf": 1.7320508075688772}, "hat.json.encode": {"tf": 2}, "hat.json.decode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 2}, "hat.json.decode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 2}, "hat.json.decode_stream": {"tf": 1.7320508075688772}, "hat.json.read_conf": {"tf": 1.7320508075688772}, "hat.json.diff": {"tf": 3}, "hat.json.patch": {"tf": 3}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.merge_schema_repositories": {"tf": 1.4142135623730951}, "hat.json.SchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.patch.diff": {"tf": 3}, "hat.json.patch.patch": {"tf": 3}, "hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 29}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.equals": {"tf": 2.449489742783178}, "hat.json.clone": {"tf": 2.449489742783178}, "hat.json.flatten": {"tf": 2.449489742783178}, "hat.json.get": {"tf": 3.3166247903554}, "hat.json.set_": {"tf": 3.3166247903554}, "hat.json.remove": {"tf": 2.8284271247461903}, "hat.json.Storage.__init__": {"tf": 1.7320508075688772}, "hat.json.Storage.register_change_cb": {"tf": 1.7320508075688772}, "hat.json.Storage.get": {"tf": 2.23606797749979}, "hat.json.Storage.set": {"tf": 2.23606797749979}, "hat.json.Storage.remove": {"tf": 1.4142135623730951}, "hat.json.encode": {"tf": 2}, "hat.json.decode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 2}, "hat.json.decode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 2}, "hat.json.decode_stream": {"tf": 1.7320508075688772}, "hat.json.read_conf": {"tf": 1.7320508075688772}, "hat.json.diff": {"tf": 3}, "hat.json.patch": {"tf": 3}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.merge_schema_repositories": {"tf": 1.4142135623730951}, "hat.json.SchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.patch.diff": {"tf": 3}, "hat.json.patch.patch": {"tf": 3}, "hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 30}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.flatten": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {"hat.json.encode_stream": {"tf": 1.4142135623730951}, "hat.json.decode_stream": {"tf": 1.4142135623730951}}, "df": 2}, "d": {"docs": {"hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 3}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.equals": {"tf": 2.449489742783178}, "hat.json.clone": {"tf": 2.449489742783178}, "hat.json.flatten": {"tf": 2.449489742783178}, "hat.json.get": {"tf": 3}, "hat.json.set_": {"tf": 3}, "hat.json.remove": {"tf": 2.449489742783178}, "hat.json.Storage.__init__": {"tf": 1.7320508075688772}, "hat.json.Storage.register_change_cb": {"tf": 1.7320508075688772}, "hat.json.Storage.get": {"tf": 1.7320508075688772}, "hat.json.Storage.set": {"tf": 1.7320508075688772}, "hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.decode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.decode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 1.7320508075688772}, "hat.json.decode_stream": {"tf": 1.7320508075688772}, "hat.json.read_conf": {"tf": 1.7320508075688772}, "hat.json.diff": {"tf": 3}, "hat.json.patch": {"tf": 3}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.merge_schema_repositories": {"tf": 1.4142135623730951}, "hat.json.SchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.patch.diff": {"tf": 3}, "hat.json.patch.patch": {"tf": 3}, "hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 29}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.equals": {"tf": 2.8284271247461903}, "hat.json.clone": {"tf": 2.8284271247461903}, "hat.json.flatten": {"tf": 2.8284271247461903}, "hat.json.get": {"tf": 3.605551275463989}, "hat.json.set_": {"tf": 3.605551275463989}, "hat.json.remove": {"tf": 3}, "hat.json.Storage.__init__": {"tf": 2}, "hat.json.Storage.register_change_cb": {"tf": 2}, "hat.json.Storage.get": {"tf": 2.23606797749979}, "hat.json.Storage.set": {"tf": 2.23606797749979}, "hat.json.Storage.remove": {"tf": 1}, "hat.json.encode": {"tf": 2}, "hat.json.decode": {"tf": 2}, "hat.json.encode_file": {"tf": 2}, "hat.json.decode_file": {"tf": 2}, "hat.json.encode_stream": {"tf": 2}, "hat.json.decode_stream": {"tf": 2}, "hat.json.read_conf": {"tf": 2}, "hat.json.diff": {"tf": 3.4641016151377544}, "hat.json.patch": {"tf": 3.4641016151377544}, "hat.json.create_schema_repository": {"tf": 2}, "hat.json.merge_schema_repositories": {"tf": 2}, "hat.json.SchemaValidator.validate": {"tf": 2}, "hat.json.PySchemaValidator.__init__": {"tf": 1.4142135623730951}, "hat.json.PySchemaValidator.validate": {"tf": 2}, "hat.json.RsSchemaValidator.__init__": {"tf": 1.4142135623730951}, "hat.json.RsSchemaValidator.validate": {"tf": 2}, "hat.json.patch.diff": {"tf": 3.4641016151377544}, "hat.json.patch.patch": {"tf": 3.4641016151377544}, "hat.json.vt.parse": {"tf": 2}}, "df": 30}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.decode": {"tf": 1.7320508075688772}, "hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1.4142135623730951}, "hat.json.decode_file": {"tf": 1.4142135623730951}, "hat.json.encode_stream": {"tf": 1.7320508075688772}, "hat.json.decode_stream": {"tf": 1.7320508075688772}}, "df": 7}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.equals": {"tf": 3.4641016151377544}, "hat.json.clone": {"tf": 3.4641016151377544}, "hat.json.flatten": {"tf": 3.4641016151377544}, "hat.json.get": {"tf": 4.47213595499958}, "hat.json.set_": {"tf": 4.47213595499958}, "hat.json.remove": {"tf": 3.7416573867739413}, "hat.json.Storage.__init__": {"tf": 2.449489742783178}, "hat.json.Storage.register_change_cb": {"tf": 2.449489742783178}, "hat.json.Storage.get": {"tf": 2.8284271247461903}, "hat.json.Storage.set": {"tf": 2.8284271247461903}, "hat.json.Storage.remove": {"tf": 1.4142135623730951}, "hat.json.encode": {"tf": 2.6457513110645907}, "hat.json.decode": {"tf": 2.8284271247461903}, "hat.json.encode_file": {"tf": 2.449489742783178}, "hat.json.decode_file": {"tf": 2.449489742783178}, "hat.json.encode_stream": {"tf": 2.449489742783178}, "hat.json.decode_stream": {"tf": 2.449489742783178}, "hat.json.read_conf": {"tf": 2.6457513110645907}, "hat.json.diff": {"tf": 4.242640687119285}, "hat.json.patch": {"tf": 4.242640687119285}, "hat.json.create_schema_repository": {"tf": 2.6457513110645907}, "hat.json.merge_schema_repositories": {"tf": 2.8284271247461903}, "hat.json.SchemaValidator.validate": {"tf": 2.6457513110645907}, "hat.json.PySchemaValidator.__init__": {"tf": 2}, "hat.json.PySchemaValidator.validate": {"tf": 2.6457513110645907}, "hat.json.RsSchemaValidator.__init__": {"tf": 2}, "hat.json.RsSchemaValidator.validate": {"tf": 2.6457513110645907}, "hat.json.patch.diff": {"tf": 4.242640687119285}, "hat.json.patch.patch": {"tf": 4.242640687119285}, "hat.json.vt.parse": {"tf": 2.449489742783178}}, "df": 30, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}, "hat.json.Storage.get": {"tf": 1}, "hat.json.Storage.set": {"tf": 1}, "hat.json.Storage.remove": {"tf": 1}, "hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 7}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {"hat.json.diff": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "x": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.equals": {"tf": 2.449489742783178}, "hat.json.clone": {"tf": 2.449489742783178}, "hat.json.flatten": {"tf": 2.449489742783178}, "hat.json.get": {"tf": 3.3166247903554}, "hat.json.set_": {"tf": 3.3166247903554}, "hat.json.remove": {"tf": 2.8284271247461903}, "hat.json.Storage.__init__": {"tf": 1.7320508075688772}, "hat.json.Storage.register_change_cb": {"tf": 1.7320508075688772}, "hat.json.Storage.get": {"tf": 2.23606797749979}, "hat.json.Storage.set": {"tf": 2.23606797749979}, "hat.json.Storage.remove": {"tf": 1.4142135623730951}, "hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.decode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.decode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 1.7320508075688772}, "hat.json.decode_stream": {"tf": 1.7320508075688772}, "hat.json.read_conf": {"tf": 2}, "hat.json.diff": {"tf": 3}, "hat.json.patch": {"tf": 3}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.merge_schema_repositories": {"tf": 1.4142135623730951}, "hat.json.SchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.patch.diff": {"tf": 3}, "hat.json.patch.patch": {"tf": 3}, "hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 30}}}, "t": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.decode": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 4}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.read_conf": {"tf": 1.7320508075688772}, "hat.json.create_schema_repository": {"tf": 1}}, "df": 5}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.equals": {"tf": 2.8284271247461903}, "hat.json.clone": {"tf": 3}, "hat.json.flatten": {"tf": 3}, "hat.json.get": {"tf": 3.605551275463989}, "hat.json.set_": {"tf": 3.605551275463989}, "hat.json.remove": {"tf": 3}, "hat.json.Storage.__init__": {"tf": 2.23606797749979}, "hat.json.Storage.register_change_cb": {"tf": 2}, "hat.json.Storage.get": {"tf": 2}, "hat.json.Storage.set": {"tf": 2}, "hat.json.encode": {"tf": 2.23606797749979}, "hat.json.decode": {"tf": 2.23606797749979}, "hat.json.encode_file": {"tf": 2.23606797749979}, "hat.json.decode_file": {"tf": 2}, "hat.json.encode_stream": {"tf": 2.23606797749979}, "hat.json.decode_stream": {"tf": 2}, "hat.json.read_conf": {"tf": 2}, "hat.json.diff": {"tf": 3.4641016151377544}, "hat.json.patch": {"tf": 3.605551275463989}, "hat.json.create_schema_repository": {"tf": 2}, "hat.json.merge_schema_repositories": {"tf": 2}, "hat.json.SchemaValidator.validate": {"tf": 2.23606797749979}, "hat.json.PySchemaValidator.__init__": {"tf": 1.4142135623730951}, "hat.json.PySchemaValidator.validate": {"tf": 2.23606797749979}, "hat.json.RsSchemaValidator.__init__": {"tf": 1.4142135623730951}, "hat.json.RsSchemaValidator.validate": {"tf": 2.23606797749979}, "hat.json.patch.diff": {"tf": 3.4641016151377544}, "hat.json.patch.patch": {"tf": 3.605551275463989}, "hat.json.vt.parse": {"tf": 2}}, "df": 29}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.equals": {"tf": 2.449489742783178}, "hat.json.clone": {"tf": 2.449489742783178}, "hat.json.flatten": {"tf": 2.449489742783178}, "hat.json.get": {"tf": 3}, "hat.json.set_": {"tf": 3}, "hat.json.remove": {"tf": 2.449489742783178}, "hat.json.Storage.__init__": {"tf": 1.7320508075688772}, "hat.json.Storage.register_change_cb": {"tf": 1.7320508075688772}, "hat.json.Storage.get": {"tf": 1.7320508075688772}, "hat.json.Storage.set": {"tf": 1.7320508075688772}, "hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.decode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.decode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 1.7320508075688772}, "hat.json.decode_stream": {"tf": 1.7320508075688772}, "hat.json.read_conf": {"tf": 1.7320508075688772}, "hat.json.diff": {"tf": 3}, "hat.json.patch": {"tf": 3}, "hat.json.create_schema_repository": {"tf": 2.23606797749979}, "hat.json.merge_schema_repositories": {"tf": 2.449489742783178}, "hat.json.SchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.PySchemaValidator.__init__": {"tf": 1.7320508075688772}, "hat.json.PySchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.RsSchemaValidator.__init__": {"tf": 1.7320508075688772}, "hat.json.RsSchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.patch.diff": {"tf": 3}, "hat.json.patch.patch": {"tf": 3}, "hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 29}}, "f": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.patch": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.get": {"tf": 1}, "hat.json.Storage.get": {"tf": 1}, "hat.json.read_conf": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.diff": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.flatten": {"tf": 3}, "hat.json.Storage.register_change_cb": {"tf": 3}, "hat.json.create_schema_repository": {"tf": 2}, "hat.json.merge_schema_repositories": {"tf": 2.8284271247461903}, "hat.json.PySchemaValidator.__init__": {"tf": 2}, "hat.json.RsSchemaValidator.__init__": {"tf": 2}}, "df": 6}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 2}}}}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.get": {"tf": 1.4142135623730951}, "hat.json.set_": {"tf": 1.4142135623730951}, "hat.json.remove": {"tf": 1.4142135623730951}, "hat.json.Storage.get": {"tf": 1.4142135623730951}, "hat.json.Storage.set": {"tf": 1.4142135623730951}, "hat.json.Storage.remove": {"tf": 1.4142135623730951}, "hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.read_conf": {"tf": 2.449489742783178}}, "df": 10, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.read_conf": {"tf": 1.7320508075688772}, "hat.json.create_schema_repository": {"tf": 1}}, "df": 5}, "k": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}}, "df": 4}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.set_": {"tf": 1}, "hat.json.Storage.set": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "b": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}, "hat.json.encode": {"tf": 1}, "hat.json.decode": {"tf": 1}, "hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 8}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {"hat.json.PySchemaValidator.__init__": {"tf": 1}, "hat.json.RsSchemaValidator.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {"hat.json.merge_schema_repositories": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 2}}}}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.decode": {"tf": 1.7320508075688772}, "hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1.7320508075688772}, "hat.json.decode_stream": {"tf": 1.7320508075688772}, "hat.json.read_conf": {"tf": 1}}, "df": 8}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.decode": {"tf": 1}, "hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 7}}}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.decode": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 4}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}}, "df": 3}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}, "x": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"hat.json.Format": {"tf": 1.4142135623730951}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "c": {"docs": {"hat.json.SchemaValidator": {"tf": 1.4142135623730951}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.PySchemaValidator": {"tf": 1}, "hat.json.RsSchemaValidator": {"tf": 1}}, "df": 2}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.PySchemaValidator": {"tf": 1}, "hat.json.RsSchemaValidator": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.PySchemaValidator": {"tf": 1}, "hat.json.RsSchemaValidator": {"tf": 1}}, "df": 2, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.PySchemaValidator": {"tf": 1}, "hat.json.RsSchemaValidator": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "doc": {"root": {"0": {"docs": {"hat.json.equals": {"tf": 2.6457513110645907}, "hat.json.get": {"tf": 1.4142135623730951}}, "df": 2}, "1": {"2": {"3": {"docs": {"hat.json.get": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"hat.json.equals": {"tf": 2.23606797749979}, "hat.json.clone": {"tf": 1}, "hat.json.flatten": {"tf": 1.4142135623730951}, "hat.json.get": {"tf": 1.7320508075688772}, "hat.json.set_": {"tf": 2.23606797749979}, "hat.json.remove": {"tf": 2.23606797749979}, "hat.json.diff": {"tf": 1.4142135623730951}, "hat.json.patch": {"tf": 1.4142135623730951}, "hat.json.patch.diff": {"tf": 1.4142135623730951}, "hat.json.patch.patch": {"tf": 1.4142135623730951}}, "df": 10, "/": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.diff": {"tf": 1}, "hat.json.patch": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}}, "df": 4}}}, "2": {"docs": {"hat.json.equals": {"tf": 1.4142135623730951}, "hat.json.clone": {"tf": 1}, "hat.json.flatten": {"tf": 1.4142135623730951}, "hat.json.get": {"tf": 1.7320508075688772}, "hat.json.set_": {"tf": 2}, "hat.json.remove": {"tf": 2}, "hat.json.diff": {"tf": 1}, "hat.json.patch": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}}, "df": 10}, "3": {"docs": {"hat.json.clone": {"tf": 1}, "hat.json.flatten": {"tf": 1.4142135623730951}, "hat.json.get": {"tf": 1.7320508075688772}, "hat.json.set_": {"tf": 1.7320508075688772}, "hat.json.remove": {"tf": 1.7320508075688772}, "hat.json.diff": {"tf": 1.4142135623730951}, "hat.json.patch": {"tf": 1.4142135623730951}, "hat.json.patch.diff": {"tf": 1.4142135623730951}, "hat.json.patch.patch": {"tf": 1.4142135623730951}}, "df": 9}, "4": {"docs": {"hat.json.get": {"tf": 1}, "hat.json.set_": {"tf": 2.23606797749979}, "hat.json.remove": {"tf": 1.7320508075688772}, "hat.json.diff": {"tf": 1.4142135623730951}, "hat.json.patch": {"tf": 1.4142135623730951}, "hat.json.patch.diff": {"tf": 1.4142135623730951}, "hat.json.patch.patch": {"tf": 1.4142135623730951}}, "df": 7}, "5": {"docs": {"hat.json.get": {"tf": 1.4142135623730951}, "hat.json.set_": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"hat.json": {"tf": 1.4142135623730951}, "hat.json.Array": {"tf": 1.7320508075688772}, "hat.json.Object": {"tf": 1.7320508075688772}, "hat.json.Data": {"tf": 1.7320508075688772}, "hat.json.equals": {"tf": 5.744562646538029}, "hat.json.clone": {"tf": 4}, "hat.json.flatten": {"tf": 4.795831523312719}, "hat.json.Path": {"tf": 1.7320508075688772}, "hat.json.get": {"tf": 3.4641016151377544}, "hat.json.set_": {"tf": 4}, "hat.json.remove": {"tf": 3.872983346207417}, "hat.json.Storage": {"tf": 2.23606797749979}, "hat.json.Storage.__init__": {"tf": 1.7320508075688772}, "hat.json.Storage.data": {"tf": 1.4142135623730951}, "hat.json.Storage.register_change_cb": {"tf": 1.4142135623730951}, "hat.json.Storage.get": {"tf": 1.4142135623730951}, "hat.json.Storage.set": {"tf": 1.4142135623730951}, "hat.json.Storage.remove": {"tf": 1.4142135623730951}, "hat.json.Format": {"tf": 1.4142135623730951}, "hat.json.Format.JSON": {"tf": 1.7320508075688772}, "hat.json.Format.YAML": {"tf": 1.7320508075688772}, "hat.json.Format.TOML": {"tf": 1.7320508075688772}, "hat.json.encode": {"tf": 6.164414002968976}, "hat.json.decode": {"tf": 4.123105625617661}, "hat.json.get_file_format": {"tf": 1.4142135623730951}, "hat.json.encode_file": {"tf": 7}, "hat.json.decode_file": {"tf": 4.898979485566356}, "hat.json.encode_stream": {"tf": 7.14142842854285}, "hat.json.decode_stream": {"tf": 5.0990195135927845}, "hat.json.read_conf": {"tf": 1.4142135623730951}, "hat.json.diff": {"tf": 4.242640687119285}, "hat.json.patch": {"tf": 1.4142135623730951}, "hat.json.SchemaId": {"tf": 1.7320508075688772}, "hat.json.Schema": {"tf": 1.7320508075688772}, "hat.json.SchemaRepository": {"tf": 1.7320508075688772}, "hat.json.create_schema_repository": {"tf": 4.898979485566356}, "hat.json.merge_schema_repositories": {"tf": 2.449489742783178}, "hat.json.SchemaValidator": {"tf": 3.4641016151377544}, "hat.json.SchemaValidator.validate": {"tf": 5}, "hat.json.PySchemaValidator": {"tf": 1.4142135623730951}, "hat.json.PySchemaValidator.__init__": {"tf": 1.7320508075688772}, "hat.json.PySchemaValidator.validate": {"tf": 5}, "hat.json.RsSchemaValidator": {"tf": 1.4142135623730951}, "hat.json.RsSchemaValidator.__init__": {"tf": 1.7320508075688772}, "hat.json.RsSchemaValidator.validate": {"tf": 5}, "hat.json.DefaultSchemaValidator": {"tf": 1.7320508075688772}, "hat.json.json_schema_repo": {"tf": 1.7320508075688772}, "hat.json.patch.diff": {"tf": 4.242640687119285}, "hat.json.patch.patch": {"tf": 4.242640687119285}, "hat.json.vt": {"tf": 1.4142135623730951}, "hat.json.vt.parse": {"tf": 8.306623862918075}}, "df": 51, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json": {"tf": 1}, "hat.json.equals": {"tf": 1.4142135623730951}, "hat.json.clone": {"tf": 1}, "hat.json.flatten": {"tf": 1}, "hat.json.Storage": {"tf": 1.4142135623730951}, "hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.decode": {"tf": 1.4142135623730951}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.decode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1.7320508075688772}, "hat.json.decode_stream": {"tf": 1}, "hat.json.read_conf": {"tf": 1}, "hat.json.diff": {"tf": 1}, "hat.json.patch": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 2.449489742783178}, "hat.json.merge_schema_repositories": {"tf": 1}, "hat.json.SchemaValidator": {"tf": 1.4142135623730951}, "hat.json.SchemaValidator.validate": {"tf": 1.4142135623730951}, "hat.json.PySchemaValidator.validate": {"tf": 1.4142135623730951}, "hat.json.RsSchemaValidator.validate": {"tf": 1.4142135623730951}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}, "hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 23}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"hat.json.patch": {"tf": 1.4142135623730951}, "hat.json.patch.patch": {"tf": 1.4142135623730951}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"hat.json": {"tf": 1}, "hat.json.equals": {"tf": 1.4142135623730951}, "hat.json.clone": {"tf": 2.23606797749979}, "hat.json.flatten": {"tf": 2.449489742783178}, "hat.json.get": {"tf": 2.6457513110645907}, "hat.json.set_": {"tf": 2.6457513110645907}, "hat.json.remove": {"tf": 2.6457513110645907}, "hat.json.Storage": {"tf": 1.4142135623730951}, "hat.json.Storage.data": {"tf": 1}, "hat.json.Storage.register_change_cb": {"tf": 1}, "hat.json.Storage.get": {"tf": 1}, "hat.json.Storage.set": {"tf": 1}, "hat.json.Storage.remove": {"tf": 1}, "hat.json.encode": {"tf": 2}, "hat.json.decode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 2}, "hat.json.decode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 2}, "hat.json.decode_stream": {"tf": 1}, "hat.json.read_conf": {"tf": 1}, "hat.json.patch": {"tf": 1.4142135623730951}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.SchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.PySchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.RsSchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.patch.patch": {"tf": 1.4142135623730951}}, "df": 26}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.diff": {"tf": 1.4142135623730951}, "hat.json.patch": {"tf": 1}, "hat.json.patch.diff": {"tf": 1.4142135623730951}, "hat.json.patch.patch": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.merge_schema_repositories": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "#": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.equals": {"tf": 1}, "hat.json.get": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"hat.json.clone": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.decode": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 3, "d": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.get_file_format": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.diff": {"tf": 1.4142135623730951}, "hat.json.patch.diff": {"tf": 1.4142135623730951}}, "df": 2}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"hat.json": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.flatten": {"tf": 1.4142135623730951}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 2}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.equals": {"tf": 1.7320508075688772}, "hat.json.clone": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.equals": {"tf": 1.7320508075688772}}, "df": 1}}}, "s": {"docs": {"hat.json.equals": {"tf": 1.7320508075688772}, "hat.json.clone": {"tf": 1}}, "df": 2}}}}}, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.equals": {"tf": 1}, "hat.json.clone": {"tf": 1}, "hat.json.flatten": {"tf": 1}, "hat.json.get": {"tf": 1}, "hat.json.set_": {"tf": 1}, "hat.json.remove": {"tf": 1}, "hat.json.diff": {"tf": 1}, "hat.json.patch": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 11}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.merge_schema_repositories": {"tf": 1}, "hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 5}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.flatten": {"tf": 1}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.flatten": {"tf": 1}, "hat.json.get": {"tf": 1}, "hat.json.set_": {"tf": 1}, "hat.json.vt.parse": {"tf": 2.23606797749979}}, "df": 4}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.Format": {"tf": 1}, "hat.json.encode": {"tf": 1}, "hat.json.decode": {"tf": 1}, "hat.json.encode_file": {"tf": 1.4142135623730951}, "hat.json.decode_file": {"tf": 1.4142135623730951}, "hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 7}}}, "e": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}}, "df": 3, "d": {"docs": {"hat.json.decode": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}, "c": {"1": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}, "2": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.equals": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1}}, "s": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.merge_schema_repositories": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.SchemaValidator": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.equals": {"tf": 1}, "hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 2}, "hat.json.decode_stream": {"tf": 1}}, "df": 5}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.flatten": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}}, "df": 1}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.clone": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.Storage": {"tf": 1}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.set_": {"tf": 1}, "hat.json.remove": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}}, "df": 3, "s": {"docs": {"hat.json.clone": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"hat.json.equals": {"tf": 1.4142135623730951}, "hat.json.clone": {"tf": 1}, "hat.json.flatten": {"tf": 1.4142135623730951}, "hat.json.remove": {"tf": 1}, "hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 2}, "hat.json.decode_stream": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 2}, "hat.json.PySchemaValidator": {"tf": 1}, "hat.json.RsSchemaValidator": {"tf": 1}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 12}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.clone": {"tf": 1}, "hat.json.encode": {"tf": 1.4142135623730951}, "hat.json.encode_file": {"tf": 1.4142135623730951}, "hat.json.encode_stream": {"tf": 1.4142135623730951}}, "df": 4}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {"hat.json.clone": {"tf": 1}, "hat.json.get_file_format": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.flatten": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 4, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 5, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.encode_stream": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {"hat.json.diff": {"tf": 1}, "hat.json.patch": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.equals": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.vt.parse": {"tf": 1}}, "df": 3}}}}}}}}}}, "t": {"docs": {"hat.json.set_": {"tf": 1.4142135623730951}, "hat.json.Storage.set": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.set_": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {"hat.json.decode": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"hat.json.encode_stream": {"tf": 2}, "hat.json.decode_stream": {"tf": 2}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 1.7320508075688772}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}}, "df": 4}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {"hat.json.diff": {"tf": 1.4142135623730951}, "hat.json.patch.diff": {"tf": 1.4142135623730951}}, "df": 2}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.create_schema_repository": {"tf": 2.449489742783178}, "hat.json.merge_schema_repositories": {"tf": 1.4142135623730951}, "hat.json.SchemaValidator": {"tf": 1}, "hat.json.SchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.PySchemaValidator.validate": {"tf": 1.7320508075688772}, "hat.json.RsSchemaValidator.validate": {"tf": 1.7320508075688772}}, "df": 6, "s": {"docs": {"hat.json.create_schema_repository": {"tf": 1}, "hat.json.merge_schema_repositories": {"tf": 1}, "hat.json.SchemaValidator": {"tf": 1}}, "df": 3}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.PySchemaValidator": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.RsSchemaValidator": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.merge_schema_repositories": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "#": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 2}}}}}}}}}, "o": {"docs": {"hat.json.equals": {"tf": 2}, "hat.json.clone": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1.7320508075688772}, "hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 8, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 2}, "hat.json.decode_stream": {"tf": 1}}, "df": 4}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.equals": {"tf": 1}, "hat.json.clone": {"tf": 1}, "hat.json.flatten": {"tf": 1}}, "df": 3}}, "e": {"docs": {"hat.json.create_schema_repository": {"tf": 2}, "hat.json.vt.parse": {"tf": 2}}, "df": 2, "y": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}, "n": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.equals": {"tf": 2}}, "df": 1}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 2}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"hat.json.flatten": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.equals": {"tf": 1}, "hat.json.flatten": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 6, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.equals": {"tf": 1}, "hat.json.Format": {"tf": 1}, "hat.json.encode": {"tf": 2.23606797749979}, "hat.json.decode": {"tf": 1.4142135623730951}, "hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 2.6457513110645907}, "hat.json.decode_file": {"tf": 2}, "hat.json.encode_stream": {"tf": 2.449489742783178}, "hat.json.decode_stream": {"tf": 1.7320508075688772}}, "df": 9, "s": {"docs": {"hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"hat.json.equals": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1.4142135623730951}, "hat.json.decode_stream": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.equals": {"tf": 1.4142135623730951}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.clone": {"tf": 1}}, "df": 1, "s": {"docs": {"hat.json.Storage": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.flatten": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1.4142135623730951}, "hat.json.decode_file": {"tf": 1.4142135623730951}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {"hat.json.equals": {"tf": 1.4142135623730951}, "hat.json.clone": {"tf": 1.7320508075688772}, "hat.json.flatten": {"tf": 1.4142135623730951}, "hat.json.get": {"tf": 1.4142135623730951}, "hat.json.set_": {"tf": 1.4142135623730951}, "hat.json.remove": {"tf": 1.4142135623730951}, "hat.json.diff": {"tf": 1.4142135623730951}, "hat.json.patch": {"tf": 1.4142135623730951}, "hat.json.create_schema_repository": {"tf": 2.449489742783178}, "hat.json.patch.diff": {"tf": 1.4142135623730951}, "hat.json.patch.patch": {"tf": 1.4142135623730951}, "hat.json.vt.parse": {"tf": 2.8284271247461903}}, "df": 12, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.equals": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}, "hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 3}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.clone": {"tf": 1}, "hat.json.flatten": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.decode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}, "hat.json.SchemaValidator": {"tf": 1}, "hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 11}}}}}}}}, "n": {"docs": {"hat.json.create_schema_repository": {"tf": 2}, "hat.json.vt.parse": {"tf": 1}}, "df": 2, "y": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1}, "d": {"docs": {"hat.json.equals": {"tf": 1.7320508075688772}, "hat.json.clone": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 4}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {"hat.json.read_conf": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.equals": {"tf": 1.7320508075688772}, "hat.json.clone": {"tf": 1.7320508075688772}, "hat.json.flatten": {"tf": 1}, "hat.json.get": {"tf": 2}, "hat.json.set_": {"tf": 1.7320508075688772}, "hat.json.remove": {"tf": 1.7320508075688772}, "hat.json.diff": {"tf": 1}, "hat.json.patch": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}}, "df": 10}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.patch": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.create_schema_repository": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.create_schema_repository": {"tf": 1.7320508075688772}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1, "s": {"docs": {"hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "s": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "n": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.equals": {"tf": 1}, "hat.json.clone": {"tf": 1.4142135623730951}, "hat.json.set_": {"tf": 1}, "hat.json.remove": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.get": {"tf": 1}, "hat.json.set_": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"hat.json.clone": {"tf": 1}, "hat.json.set_": {"tf": 1}, "hat.json.remove": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1, "s": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}}}, "b": {"docs": {"hat.json.equals": {"tf": 1.4142135623730951}, "hat.json.set_": {"tf": 1.7320508075688772}, "hat.json.remove": {"tf": 1.4142135623730951}}, "df": 3, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.equals": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.clone": {"tf": 1}, "hat.json.Storage": {"tf": 1}, "hat.json.get_file_format": {"tf": 1}}, "df": 3}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "y": {"docs": {"hat.json.get": {"tf": 1}, "hat.json.set_": {"tf": 1}, "hat.json.remove": {"tf": 1.4142135623730951}}, "df": 3}, "e": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1.4142135623730951}, "hat.json.decode_stream": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1.7320508075688772}, "hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 8}, "r": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.set_": {"tf": 1}, "hat.json.diff": {"tf": 1}, "hat.json.patch": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"hat.json.equals": {"tf": 1.4142135623730951}, "hat.json.vt.parse": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.SchemaValidator": {"tf": 1}}, "df": 1}}, "e": {"docs": {"hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 3, "d": {"docs": {"hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 3}}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.vt": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.equals": {"tf": 1}, "hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 2}, "hat.json.decode_stream": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 6, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.clone": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}}, "df": 2}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.clone": {"tf": 1}, "hat.json.flatten": {"tf": 1.4142135623730951}, "hat.json.decode_stream": {"tf": 1}}, "df": 3}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.encode": {"tf": 1.4142135623730951}, "hat.json.encode_file": {"tf": 1.4142135623730951}, "hat.json.encode_stream": {"tf": 1.4142135623730951}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}}, "df": 3}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.SchemaValidator": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1}}}, "s": {"docs": {"hat.json.equals": {"tf": 2}, "hat.json.clone": {"tf": 1.7320508075688772}, "hat.json.flatten": {"tf": 1.4142135623730951}, "hat.json.get": {"tf": 1}, "hat.json.set_": {"tf": 1}, "hat.json.remove": {"tf": 1}, "hat.json.encode": {"tf": 1.4142135623730951}, "hat.json.encode_file": {"tf": 2}, "hat.json.decode_file": {"tf": 1.4142135623730951}, "hat.json.encode_stream": {"tf": 1.7320508075688772}, "hat.json.decode_stream": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 2.6457513110645907}, "hat.json.merge_schema_repositories": {"tf": 1.4142135623730951}, "hat.json.vt.parse": {"tf": 2.449489742783178}}, "df": 14}, "f": {"docs": {"hat.json.flatten": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.decode_file": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 2}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 5}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.encode": {"tf": 1.4142135623730951}, "hat.json.encode_file": {"tf": 1.4142135623730951}, "hat.json.encode_stream": {"tf": 1.4142135623730951}, "hat.json.vt.parse": {"tf": 1}}, "df": 4}}}}}}, "o": {"docs": {"hat.json.encode_stream": {"tf": 1.4142135623730951}, "hat.json.decode_stream": {"tf": 1.4142135623730951}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 3}, "t": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "m": {"docs": {"hat.json.vt.parse": {"tf": 2}}, "df": 1, "s": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.merge_schema_repositories": {"tf": 1}, "hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 6, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 3}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.PySchemaValidator": {"tf": 1}, "hat.json.RsSchemaValidator": {"tf": 1}}, "df": 2}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.equals": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.vt.parse": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.flatten": {"tf": 1}, "hat.json.Storage": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 2}, "hat.json.merge_schema_repositories": {"tf": 1}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 5}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}}, "df": 1}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.clone": {"tf": 1}, "hat.json.flatten": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1}, "hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.flatten": {"tf": 1.7320508075688772}, "hat.json.set_": {"tf": 2.23606797749979}, "hat.json.remove": {"tf": 2.23606797749979}, "hat.json.diff": {"tf": 1.4142135623730951}, "hat.json.patch": {"tf": 1.4142135623730951}, "hat.json.patch.diff": {"tf": 1.4142135623730951}, "hat.json.patch.patch": {"tf": 1.4142135623730951}}, "df": 7, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.clone": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.get": {"tf": 1}, "hat.json.remove": {"tf": 1}}, "df": 2}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.remove": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"hat.json.remove": {"tf": 1.4142135623730951}, "hat.json.Storage.remove": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"hat.json.Storage": {"tf": 1}, "hat.json.vt.parse": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.diff": {"tf": 1}, "hat.json.patch": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {"hat.json.SchemaValidator": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.create_schema_repository": {"tf": 1.7320508075688772}, "hat.json.SchemaValidator": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.merge_schema_repositories": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.Storage.register_change_cb": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.read_conf": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.encode_stream": {"tf": 1}, "hat.json.decode_stream": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.merge_schema_repositories": {"tf": 1}}, "df": 2}, "s": {"docs": {"hat.json.SchemaValidator.validate": {"tf": 1}, "hat.json.PySchemaValidator.validate": {"tf": 1}, "hat.json.RsSchemaValidator.validate": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.RsSchemaValidator": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.clone": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.get": {"tf": 1.7320508075688772}, "hat.json.set_": {"tf": 1.7320508075688772}, "hat.json.remove": {"tf": 1.7320508075688772}, "hat.json.Storage": {"tf": 1}, "hat.json.get_file_format": {"tf": 1}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.decode_file": {"tf": 1.7320508075688772}, "hat.json.diff": {"tf": 1}, "hat.json.patch": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1}}, "df": 12, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.diff": {"tf": 1}, "hat.json.patch": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}, "hat.json.patch.patch": {"tf": 1.4142135623730951}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.remove": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1, "r": {"docs": {"hat.json.vt": {"tf": 1}}, "df": 1}, "d": {"docs": {"hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.create_schema_repository": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"hat.json.PySchemaValidator": {"tf": 1}}, "df": 1}}}}}}, "x": {"docs": {"hat.json.clone": {"tf": 2.23606797749979}}, "df": 1, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.vt": {"tf": 1}, "hat.json.vt.parse": {"tf": 1.7320508075688772}}, "df": 2, "n": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {"hat.json.clone": {"tf": 2}}, "df": 1, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.flatten": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.flatten": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}, "hat.json.create_schema_repository": {"tf": 1.4142135623730951}}, "df": 4}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.create_schema_repository": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.flatten": {"tf": 1}}, "df": 1}}, "e": {"docs": {"hat.json.diff": {"tf": 1}, "hat.json.patch.diff": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {"hat.json.get": {"tf": 2.23606797749979}, "hat.json.Storage.get": {"tf": 1}}, "df": 2, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.Storage": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"hat.json.Storage": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1}, "t": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"hat.json.Storage": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"hat.json.encode": {"tf": 1}, "hat.json.encode_file": {"tf": 1}, "hat.json.encode_stream": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.create_schema_repository": {"tf": 1}, "hat.json.merge_schema_repositories": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.merge_schema_repositories": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"hat.json.vt.parse": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"hat.json.encode": {"tf": 1.7320508075688772}, "hat.json.encode_file": {"tf": 1.7320508075688772}, "hat.json.encode_stream": {"tf": 1.7320508075688772}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"hat.json.vt.parse": {"tf": 1}}, "df": 1}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();